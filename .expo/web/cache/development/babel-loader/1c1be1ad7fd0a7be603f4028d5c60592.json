{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nexport var onUserLogin = function onUserLogin(_ref) {\n  var username = _ref.username,\n      password = _ref.password;\n  return function _callee(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.post('url', {\n              username: username,\n              password: password\n            }));\n\n          case 3:\n            response = _context.sent;\n            dispatch({\n              type: \"LOGIN\",\n              payload: response.data\n            });\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch({\n              type: \"ERROR\",\n              payload: _context.t0\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\nexport var onSignUp = function onSignUp(_ref2) {\n  var username = _ref2.username,\n      password = _ref2.password;\n  return function _callee2(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(axios.post('url', {\n              username: username,\n              password: password\n            }));\n\n          case 3:\n            response = _context2.sent;\n            dispatch({\n              type: \"SIGNUP\",\n              payload: response.data\n            });\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch({\n              type: \"ERROR\",\n              payload: _context2.t0\n            });\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};","map":{"version":3,"sources":["/Users/michaellee/Flatiron/mod_5/project/Project_5_Client/redux/actions.js"],"names":["axios","onUserLogin","username","password","dispatch","post","response","type","payload","data","onSignUp"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAA0B;AAAA,MAAxBC,QAAwB,QAAxBA,QAAwB;AAAA,MAAdC,QAAc,QAAdA,QAAc;AACjD,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAGwBJ,KAAK,CAACK,IAAN,CAAW,KAAX,EAAkB;AAACH,cAAAA,QAAQ,EAARA,QAAD;AAAWC,cAAAA,QAAQ,EAARA;AAAX,aAAlB,CAHxB;;AAAA;AAGOG,YAAAA,QAHP;AAICF,YAAAA,QAAQ,CAAC;AAAEG,cAAAA,IAAI,EAAE,OAAR;AAAiBC,cAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAnC,aAAD,CAAR;AAJD;AAAA;;AAAA;AAAA;AAAA;AAMCL,YAAAA,QAAQ,CAAC;AAAEG,cAAAA,IAAI,EAAE,OAAR;AAAiBC,cAAAA,OAAO;AAAxB,aAAD,CAAR;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AASH,CAVM;AAYP,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,QAA0B;AAAA,MAAxBR,QAAwB,SAAxBA,QAAwB;AAAA,MAAdC,QAAc,SAAdA,QAAc;AAC9C,SAAO,kBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAGwBJ,KAAK,CAACK,IAAN,CAAW,KAAX,EAAkB;AAACH,cAAAA,QAAQ,EAARA,QAAD;AAAWC,cAAAA,QAAQ,EAARA;AAAX,aAAlB,CAHxB;;AAAA;AAGOG,YAAAA,QAHP;AAICF,YAAAA,QAAQ,CAAC;AAAEG,cAAAA,IAAI,EAAE,QAAR;AAAkBC,cAAAA,OAAO,EAAEF,QAAQ,CAACG;AAApC,aAAD,CAAR;AAJD;AAAA;;AAAA;AAAA;AAAA;AAMCL,YAAAA,QAAQ,CAAC;AAAEG,cAAAA,IAAI,EAAE,OAAR;AAAiBC,cAAAA,OAAO;AAAxB,aAAD,CAAR;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AASH,CAVM","sourcesContent":["import axios from 'axios'\n\nexport const onUserLogin = ({username, password}) => {\n    return async (dispatch) => {\n\n        try {\n            const response = await axios.post('url', {username, password})\n            dispatch({ type: \"LOGIN\", payload: response.data})\n        } catch (error) {\n            dispatch({ type: \"ERROR\", payload: error })\n        }\n    }\n}\n\nexport const onSignUp = ({username, password}) => {\n    return async (dispatch) => {\n\n        try {\n            const response = await axios.post('url', {username, password})\n            dispatch({ type: \"SIGNUP\", payload: response.data})\n        } catch (error) {\n            dispatch({ type: \"ERROR\", payload: error })\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}